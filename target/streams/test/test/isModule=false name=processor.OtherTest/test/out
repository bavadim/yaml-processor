[0m[[0minfo[0m] [0m[32mOtherTest:[0m[0m
[0m[[0minfo[0m] [0m[32m- Empty inline map[0m[0m
[0m[[0minfo[0m] [0m[32m- Empty inline list[0m[0m
[0m[[0minfo[0m] [0m[32m- simple list[0m[0m
[0m[[0minfo[0m] [0m[32m- simple block map[0m[0m
[0m[[0minfo[0m] [0m[32m- simple pair[0m[0m
[0m[[0minfo[0m] [0m[32m- With empty inline map[0m[0m
[0m[[0minfo[0m] [0m[32m- empty inline list and map[0m[0m
[0m[[0minfo[0m] [0m[32m- list of list[0m[0m
[0m[[0minfo[0m] [0m[31m- map of map *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Mapping(Map(Scalar(JFrame,None) -> Mapping(Map(Scalar(name,None) -> Scalar(myFrame,None), Scalar(title,None) -> Scalar(My App Frame,None)),None)),None) did not equal Mapping(Map(Scalar(JFrame,None) -> Mapping(Map(Scalar(name,None) -> Scalar(myFrame,None), Scalar(title,None) -> Scalar(MyAppFrame,None)),None)),None) (OtherTest.scala:80)[0m[0m
[0m[[0minfo[0m] [0m[31m- list of map *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  List(Map("name" -> "John Smith", "age" -> "33"), Map("name" -> "Mary Smith", "age" -> "27")) did not equal Sequence(List(Mapping(Map(Scalar(name,None) -> Scalar(JohnSmith,None), Scalar(age,None) -> Scalar(33,None)),None), Mapping(Map(Scalar(name,None) -> Scalar(MarySmith,None), Scalar(age,None) -> Scalar(27,None)),None)),None) (OtherTest.scala:113)[0m[0m
[0m[[0minfo[0m] [0m[31m- map of list *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("men" -> List("John Smith", "Bill Jones"), "women" -> List("Mary Smith", "Susan Williams")) did not equal Mapping(Map(Scalar(men,None) -> Sequence(List(Scalar(JohnSmith,None), Scalar(BillJones,None)),None), Scalar(women,None) -> Sequence(List(Scalar(MarySmith,None), Scalar(SusanWilliams,None)),None)),None) (OtherTest.scala:126)[0m[0m
[0m[[0minfo[0m] [0m[31m- inline map *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("key" -> "value") did not equal Mapping(Map(Scalar(key,None) -> Scalar(value,None)),None) (OtherTest.scala:150)[0m[0m
[0m[[0minfo[0m] [0m[31m- map of map of map *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("JFrame" -> Map("content" -> Map("button" -> "press"))) did not equal Mapping(Map(Scalar(JFrame,None) -> Mapping(Map(Scalar(content,None) -> Mapping(Map(Scalar(button,None) -> Scalar(press,None)),None)),None)),None) (OtherTest.scala:156)[0m[0m
[0m[[0minfo[0m] [0m[31m- inline list *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  List("item1", "item2") did not equal Sequence(List(Scalar(item1,None), Scalar(item2,None)),None) (OtherTest.scala:178)[0m[0m
[0m[[0minfo[0m] [0m[31m- map of inline list *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("men" -> List("John Smith", "Bill Jones"), "women" -> List("Mary Smith", "Susan Williams")) did not equal Mapping(Map(Scalar(men,None) -> Sequence(List(Scalar(JohnSmith,None), Scalar(BillJones,None)),None), Scalar(women,None) -> Sequence(List(Scalar(MarySmith,None), Scalar(SusanWilliams,None)),None)),None) (OtherTest.scala:183)[0m[0m
[0m[[0minfo[0m] [0m[31m- more complicated *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("address" -> Map("first_name" -> "Brian", "last_name" -> "Reece", "email" -> "brian@majordomo.com", "company" -> Map("name" -> "Five Apart, Ltd.", "street_address" -> "8458 5th Street, San Francisco, CA 94107"))) did not equal Mapping(Map(Scalar(address,None) -> Mapping(Map(Scalar(first_name,None) -> Scalar(Brian,None), Scalar(last_name,None) -> Scalar(Reece,None), Scalar(email,None) -> Scalar(brian@majordomo.com,None), Scalar(company,None) -> Mapping(Map(Scalar(name,None) -> Scalar(FiveApart,Ltd.,None), Scalar(street_address,None) -> Scalar(84585thStreet,SanFrancisco,CA94107,None)),None)),None)),None) (OtherTest.scala:192)[0m[0m
[0m[[0minfo[0m] [0m[31m- comments *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Map("hr" -> List("Mark McGwire", "Sammy Sosa"), "rbi" -> List("Sammy Sosa", "Ken Griffey")) did not equal Mapping(Map(Scalar(hr,None) -> Sequence(List(Scalar(MarkMcGwire,None), Scalar(SammySosa,None)),None), Scalar(rbi,None) -> Sequence(List(Scalar(SammySosa,None), Scalar(KenGriffey,None)),None)),None) (OtherTest.scala:211)[0m[0m
[0m[[0minfo[0m] [0m[31m- Yet another comments *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Mapping(Map(Scalar(hr,None) -> Sequence(List(Scalar(MarkMcGwire,None), Scalar(SammySosa,Some(!))),None), Scalar(rbi,None) -> Sequence(List(Scalar(Aliases not supported yet!,None), Scalar(KenGriffey,None)),None)),None) did not equal Map("hr" -> List("Mark McGwire", "&SS Sammy Sosa"), "rbi" -> List("*SS", "Ken Griffey")) (OtherTest.scala:226)[0m[0m
[0m[[0minfo[0m] [0m[31m- block skalars *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Mapping(Map(Scalar(name,None) -> Scalar(MarkMcGwire,None), Scalar(accomplishment,None) -> Scalar(,None)),None) did not equal Map("name" -> "Mark McGwire", "accomplishment" -> "Mark set a major league home run record in 1998.", "stats" -> "[0m[0m
[0m[[0minfo[0m] [0m[31m  65 Home Runs[0m[0m
[0m[[0minfo[0m] [0m[31m  0.278 Batting Average", "other" -> "OK") (OtherTest.scala:242)[0m[0m
[0m[[0minfo[0m] [0m[31m- Parser must parse file 1 *** FAILED ***[0m[0m
[0m[[0minfo[0m] [0m[31m  Mapping(Map(Scalar(,None) -> Scalar(9000/,None), Scalar(/testService,None) -> Mapping(Map(Scalar(/testMethod,None) -> Mapping(Map(Scalar(description,None) -> Scalar(OLOLOOLOLOOLOLO,None), Scalar(get,None) -> Mapping(Map(Scalar(responses,None) -> Mapping(Map(Scalar(200,None) -> Mapping(Map(Scalar(body,None) -> Mapping(Map(Scalar(application/json,None) -> Mapping(Map(Scalar(example,None) -> Scalar( {[0m[0m
[0m[[0minfo[0m] [0m[31m   "data": "OLOLO1"[0m[0m
[0m[[0minfo[0m] [0m[31m   }[0m[0m
[0m[[0minfo[0m] [0m[31m  ,None)),None)),None)),None)),None), Scalar(description,None) -> Scalar( controllers.Clients.show1[0m[0m
[0m[[0minfo[0m] [0m[31m   Retrieve a test JSON[0m[0m
[0m[[0minfo[0m] [0m[31m  ,None)),None)),None), Scalar(/testMethodWithParam,None) -> Mapping(Map(Scalar(description,None) -> Scalar(WithParam!!!,None), Scalar(/{param},None) -> Mapping(Map(Scalar(uriParameters,None) -> Mapping(Map(Scalar(param,None) -> Mapping(Map(Scalar(displayName,None) -> Scalar(UserID,None), Scalar(description,None) -> Scalar(WithParam!!!,None)),None)),None), Scalar(get,None) -> Mapping(Map(Scalar(description,None) -> Scalar( controllers.Clients.show2(id: Long)[0m[0m
[0m[[0minfo[0m] [0m[31m  ,None)),None)),None)),None)),None), Scalar(version,None) -> Scalar(v1,None), Scalar(baseUri,None) -> Mapping(Map(Scalar(http,None) -> Scalar(//127.0.0.1,None)),None), Scalar(title,None) -> Scalar(TestAPI,None)),None) did not equal Map("title" -> "Test API", "baseUri" -> "http://127.0.0.1:9000/", "version" -> "v1", "/testService" -> Map("/testMethod" -> Map("description" -> "OLOLO OLOLO OLOLO", "get" -> Map("responses" -> Map("200" -> Map("body" -> Map("application/json" -> Map("example" -> "[0m[0m
[0m[[0minfo[0m] [0m[31m  {[0m[0m
[0m[[0minfo[0m] [0m[31m  "data": "OLOLO1"[0m[0m
[0m[[0minfo[0m] [0m[31m  }")))), "description" -> "[0m[0m
[0m[[0minfo[0m] [0m[31m  controllers.Clients.show1[0m[0m
[0m[[0minfo[0m] [0m[31m  Retrieve a test JSON")), "/testMethodWithParam" -> Map("description" -> "With Param!!!", "/{param}" -> Map("uriParameters" -> Map("param" -> Map("displayName" -> "User ID", "description" -> "With Param!!!")), "get" -> Map("description" -> "[0m[0m
[0m[[0minfo[0m] [0m[31m  controllers.Clients.show2(id: Long)"))))) (OtherTest.scala:285)[0m[0m
